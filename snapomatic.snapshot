#! /usr/bin/python3
import sys
pythonversion=sys.version_info
if pythonversion[0] != 3 or (pythonversion[1] < 6 or pythonversion[1] > 11):
    print("This script requires Python 3.6 through 3.11")
    sys.exit(1)
sys.path.append(sys.path[0] + "/NTAPlib")
from getSnapshots import getSnapshots
from getCGSnapshots import getCGSnapshots
from createSnapshots import createSnapshots
from createCGSnapshots import createCGSnapshots
from deleteCGSnapshots import deleteCGSnapshots
from deleteSnapshots import deleteSnapshots
import userio

snapomaticversion='DEV'

knownmodes=['show','create','delete','restore']

validoptions={}
validoptions['create']={'name':'str','prefix':'str','target':'multistr','cg':'bool','label':'str', \
                        'debug':'bool', \
                        'restdebug':'bool'}

validoptions['restore']={'name':'str','target':'multistr','cg':'bool', \
                         'debug':'bool', \
                         'restdebug':'bool'}

validoptions['show']={'name':'str','prefix':'str','target':'multistr','cg':'bool', \
                      'debug':'bool', \
                      'restdebug':'bool'}

validoptions['delete']={'name':'str','prefix':'str','target':'multistr','maxcount':'int','maxage':'str','cg':'bool', \
                        'debug':'bool', \
                        'force':'bool', \
                        'restdebug':'bool'}

requiredoptions={'create'   :['target',['name','prefix']], \
                 'restore'  :['target','name'], \
                 'show'      :['target'], \
                 'delete'   :['target',['name','prefix','maxcount','maxage']]}

mutex=[['name','prefix']]

usage="Version " + snapomaticversion + "\n" + \
      "snapshot show\n" + \
      "        [--target]\n" + \
      "        (svm [filesystem, LUN, or volume]\n\n" + \
      "        (Optional. Name for snapshot. Wildcards accepted.)\n\n" + \
      "        [--cg]\n" + \
      "        (Restrict search to CG snapshots. Wildcards accepted.)\n\n" + \
      "        [--debug]\n" + \
      "        (show debug output)\n\n" + \
      "        [--restdebug]\n" + \
      "        (show REST API debug output)\n\n" \
      "snapshot create\n" + \
      "        [--target]\n" + \
      "        (svm [filesystem, CG, LUN, or volume]\n\n" + \
      "        [--name||prefix]\n" + \
      "        (Name or prefix for snapshot)\n\n" + \
      "        [--label|]\n" + \
      "        (Snapmirror label for the snapshot)\n\n" + \
      "        [--cg]\n" + \
      "        (Create CG snapshots.)\n\n" + \
      "        [--debug]\n" + \
      "        (show debug output)\n\n" + \
      "        [--restdebug]\n" + \
      "        (show REST API debug output)\n\n" + \
      "snapshot delete\n" + \
      "        [--target]\n" + \
      "        (svm [filesystem, LUN, or volume]\n\n" + \
      "        [--name]\n" + \
      "        (Optional. Name of snapshot. Wildcards accepted)\n\n" + \
      "        [--maxcount]\n" + \
      "        (Optional. Maximum number of snapshots to retain)\n\n" + \
      "        [--maxage]\n" + \
      "        (Optional. Maximum age of snapshots to retain.\n" + \
      "        (Accepts d[ays]/h[ours]/m[inutes]/[s]econds\n\n" + \
      "        [--force]\n" + \
      "        (Override all safeguards)\n\n" + \
      "        [--debug]\n" + \
      "        (show debug output)\n\n" + \
      "        [--restdebug]\n" + \
      "        (show REST API debug output)\n" 

myopts=userio.validateoptions(sys.argv,validoptions,modes=knownmodes,usage=usage,mutex=mutex,required=requiredoptions)

svm=myopts.target[0]
voltargets=[]
luntargets=[]
fstargets=[]
if len(myopts.target) == 1:
    voltargets.append('*')
else:
    for item in myopts.target[1:]:
        if not item[0] == '/':
            voltargets.append(item)

if myopts.mode == 'create' and voltargets==['*']:
    userio.fail("Cannot create snapshots with volumes = *")

debug=0
if myopts.debug:
    debug=debug+1
if myopts.restdebug:
    debug=debug+2

name=myopts.name

if myopts.mode == 'create':
    label=myopts.label
    if myopts.prefix is not None:
        name=myopts.prefix + '_' + userio.randomtoken()[:32]

if myopts.mode == 'show':
    if myopts.prefix is not None:
        name=myopts.prefix + '_*'

if myopts.mode == 'delete':
    maxcount=myopts.maxcount
    maxage=myopts.maxage
    force=myopts.force
    if myopts.prefix is not None:
        name=myopts.prefix + '_*'
    try:
        if (name == '*' or name == '.*' or name == '.*$') and myopts.force:
            pass
    except:
        userio.fail("Cannot use snapshot wildcard without --force")

cg=myopts.cg

if myopts.mode == 'delete':
    if len(voltargets) > 0:
        if cg:
            snapshots=deleteCGSnapshots(svm,voltargets,name,force=force,maxcount=maxcount,maxage=maxage,debug=debug)
            grid=[['CG','Volume','Snapshot','Status']]
        else:
            snapshots=deleteSnapshots(svm,voltargets,name,force=force,maxcount=maxcount,maxage=maxage,debug=debug)
            grid=[['Volume','Snapshot','Status']]
        if not snapshots.go():
            userio.message("ERROR: " + snapshots.reason)
        else:
            userio.message("Success")
        deleted=list(snapshots.deleted.keys())
        deleted.sort()
        if cg:
            for cg in deleted:
                deletedvols=list(snapshots.deleted[cg])
                deletedvols.sort()
                for volume in deletedvols:
                    for snap in snapshots.deleted[cg][volume]:
                        grid.append([cg,volume,snap,'Deleted'])
        else:
            for volume in deleted:
                for snap in snapshots.deleted[volume]:
                    grid.append([volume,snap,'Deleted'])
        failed2delete=list(snapshots.failed.keys())
        failed2delete.sort()
        if cg:
            for cg in failed2delete:
                deletedvols=list(snapshots.deleted[cg])
                deletedvols.sort()
                for volume in deletedvols:
                    for snap in snapshots.failed[volume]:
                        grid.append([volume,snap,'FAIL'])
        else:
            for volume in failed2delete:
                for snap in snapshots.failed[volume]:
                    grid.append([volume,snap,'FAIL'])
        if len(failed2delete) > 0 or len(deleted) > 0:
            userio.grid(grid)

elif myopts.mode == 'create':
    if len(voltargets) > 0:
        if cg:
            snapshots=createCGSnapshots(svm,voltargets,name,cg=True,label=label,debug=debug)
        else:
            snapshots=createSnapshots(svm,voltargets,name,label=label,debug=debug)
        if not snapshots.go():
            userio.message("ERROR: " + snapshots.reason)
        else:
            userio.message("Success")
            if cg:
                grid=[['CG','Snapshot','Status']]
            else:
                grid=[['Volume','Snapshot','Status']]
            for volume in snapshots.success:
                grid.append([volume,name,'Success'])
            for volume in snapshots.failed:
                grid.append([volume,name,'Fail'])
            userio.grid(grid)

elif myopts.mode == 'show':
    if len(voltargets) > 0:
        if cg:
            snapshots=getCGSnapshots(svm,cgs=voltargets,cg=True,name=name,debug=debug)
        else:
            snapshots=getSnapshots(svm,volumes=voltargets,name=name,debug=debug)
        if not snapshots.go():
            userio.message("ERROR: " + snapshots.reason)
            sys.exit(1)
        else:
            if cg:
                grid=[['CG','Parent','Volume','Snapshot','Date']]
                cglist=list(snapshots.snapshots.keys())
                cglist.sort()
                for cgname in cglist:
                    try:
                        parentfield=snapshots.cgs[cgname]['parent']
                    except:
                        parentfield='-'
                    volumelist=list(snapshots.snapshots[cgname]['volumes'].keys())
                    volumelist.sort()
                    for volume in volumelist:
                        snapshotlist=sorted(snapshots.snapshots[cgname]['ordered'],key=lambda x: int(x[1]))
                        for snapshot,epoch in snapshotlist:
                            grid.append([cgname,parentfield,volume,snapshot,snapshots.snapshots[cgname]['snapshots'][snapshot]['createtime']])

            else:
                grid=[['Volume','Snapshot','Date']]
                volumelist=list(snapshots.snapshots.keys())
                volumelist.sort()
                for volume in volumelist:
                    snapshotlist=sorted(snapshots.snapshots[volume]['ordered'],key=lambda x: int(x[1]))
                    for snapshot,epoch in snapshotlist:
                        grid.append([volume,snapshot,snapshots.snapshots[volume]['snapshots'][snapshot]['createtime']])
            userio.grid(grid)
