#! /usr/bin/python3

import sys
pythonversion=sys.version_info
if pythonversion[0] != 3 or (pythonversion[1] < 6 or pythonversion[1] > 11):
    userio.message("This script requires Python 3.6 through 3.11")
    sys.exit(1)
sys.path.append(sys.path[0] + "/NTAPlib")
import userio
from getSnapmirror import getSnapmirror
from getSnapshots import getSnapshots
from getVolumes import getVolumes
from getLUNs import getLUNs
from cloneVolumes import cloneVolumes
from mapLUNs import mapLUNs
import time
import getopt
import re
import binascii

snapomaticversion='DEV'

validoptions={'target':'multistr',
              'igrouptoken':'int',
              'snapshot-prefix':'str',
              'igroupname':'str',
              'skew':'int',
              'split':'bool',
              'nosleep':'bool',
              'debug':'bool',
              'restdebug':'bool',
              'recoverypoint':'timestamp',
              'after':'bool',
              'nocgs':'bool',
              'local':'bool',
              'before':'bool'}

requiredoptions=['target','igrouptoken']
mutex=[['after','before']]

usage="Version " + snapomaticversion + "\n" + \
      "clone4DR --target\n" + \
      "          (name of target svm and volumes)\n" + \
      "          (syntax: svm volume or svm volume/lun, wildcards accepted)\n\n" + \
      "          --snapshot-prefix\n" + \
      "          (optionally restrict search to snapshots with a prefix* syntax)\n\n" + \
      "          --igrouptoken\n" + \
      "          (identifies the _ delimited position of the igroup)\n\n" + \
      "          --recoverypoint\n" + \
      "          (recovery timestamp in YYYY-MM-DDTHH:MM:SS+ZZZZ)\n\n" + \
      "          --after|--before\n" + \
      "          (used with --recoverypoint)\n" + \
      "          (look for snapshots before|after specified recoverypoint)\n" + \
      "          (default behavior is AFTER)\n\n" + \
      "          --skew\n" + \
      "          (maximum time difference between cloned volumes, seconds)\n\n" + \
      "          [--igroupname]\n" + \
      "          (optionally specifies the igroup name, %=token\n\n" + \
      "          [--split]\n" + \
      "          (split the cloned volumes)\n\n" + \
      "          [--nocgs]\n" + \
      "          (Skip CG snapshot discovery)\n\n" + \
      "          [--local]\n" + \
      "          (work with sources volumes, not snapmirror destination volumes)\n\n" + \
      "          [--debug]\n" + \
      "          (show debug output)\n\n" + \
      "          [--restdebug]\n" + \
      "          (show REST API calls and responses)\n\n" 

myopts=userio.validateoptions(sys.argv,validoptions,mutex=mutex,usage=usage,required=requiredoptions)

svm=myopts.target[0]
voltargets={}
if len(myopts.target) == 1:
    voltargets={'*':['*']}
else:
    for item in myopts.target[1:]:
        pieces=item.split('/')
        if pieces[0] not in voltargets.keys():
            voltargets[pieces[0]] = []
        if len(pieces) == 1:
            voltargets[pieces[0]].append('*')
        elif len(pieces) == 2:
            voltargets[pieces[0]].append(pieces[1])
        else:
            userio.fail("Illegal format for target " + item)
    for vol in voltargets.keys():
        if len(voltargets[vol]) > 1 and '*' in voltargets[vol]:
            userio.fail("Volume targets includes a volume/LUN pair and that same volume")

igrouptoken=myopts.igrouptoken

try:
    recoverytarget=myopts.recoverypoint
    if myopts.before:
        recoverBefore=True
    else:
        recoverBefore=False
except:
    recoverytarget=False

prefix=myopts.snapshot_prefix

splitclones=myopts.split

debug=0
if myopts.debug:
    debug=debug+1

if myopts.restdebug:
    debug=debug+2

igroupname=myopts.igroupname

nosleep=myopts.nosleep

clonelist=[]

userio.linefeed()
if not myopts.local:
    cloneprefix = "failover_"
    userio.message("Retrieving snapmirrored volumes...")
    snapmirror=getSnapmirror(svm,volumes=voltargets.keys(),debug=debug)
    if not snapmirror.go():
        snapmirror.showDebug()
    if len(snapmirror.snapmirrorDestinations.keys()) < 1:
        userio.fail("No matching snapmirrored volumes detected")

    if len(snapmirror.snapmirrorDestinations[svm]['volumes'].keys()) > 0:
        userio.message("Found matching snapmirrored volumes")
    else:
        userio.fail("No matching snapmirrored volumes detected")
    for volume in snapmirror.snapmirrorDestinations[svm]['volumes'].keys():
        userio.message(">> " + volume)
        clonelist.append(volume)
    userio.message()
else:
    cloneprefix = "clone_"
    volumes=getVolumes(svm,volumes=voltargets.keys(),debug=debug)
    if not volumes.go():
        userio.message(volumes.reason)
        sys.exit(1)
    for volume in volumes.volumesmatch.keys():
        userio.message(">> " + volume)
        clonelist.append(volume)
    userio.message()

userio.linefeed()
userio.message("Retrieving snapshots...")
if prefix:
    snapshots=getSnapshots(svm,volumes=clonelist,name=prefix + "*",nocgs=myopts.nocgs, debug=debug)
else:
    snapshots=getSnapshots(svm,volumes=clonelist,nocgs=myopts.nocgs,debug=debug)
if not snapshots.go():
    snapshots.showDebug()

for vol in clonelist:
    if vol in snapshots.snapshots.keys():
        try:
            userio.message("Most recent snapshot on volume " + vol + ":")
            userio.message(">> " + snapshots.snapshots[vol]['recent'])
        except:
            userio.message("No matching snapshots on volume " + vol + ":")
    else:
        userio.message("No matching snapshots found on volume " + vol)
    userio.message()

userio.linefeed()
clonetargets={}
unable2clone=[]
ready2clone=[]
userio.message("Verifying snapshot state matches requirements...")
for vol in clonelist:
    snapshot2clone=False
    timestamp=False
    if not recoverytarget:
        if len(snapshots.snapshots[vol]['ordered']) > 0:
            snapshot2clone=snapshots.snapshots[vol]['recent']
            userio.message("Volume " + vol + " most recent snapshot is " + \
            snapshots.snapshots[vol]['snapshots'][snapshots.snapshots[vol]['recent']]['createtime'])
            clonetargets[vol]=snapshots.snapshots[vol]['snapshots'][snapshot2clone]
            ready2clone.append([vol,snapshot2clone])
        else:
            userio.message("Unable to find snapshot for " + vol + " that matches requested recoverypoint")
            unable2clone.append(vol)
    else:
        #print("Recovery point:" + str(recoverytarget))
        for x in range(0,len(snapshots.snapshots[vol]['ordered'])):
            #print()
            #print("Snapshot:" + str(snapshots.snapshots[vol]['ordered'][x]))
            #print("Delta: " + str(snapshots.snapshots[vol]['ordered'][x][1] - recoverytarget))
            #print("x=" + str(x))
            if recoverBefore:
                #if snapshots.snapshots[vol]['ordered'][x][1] < recoverytarget:
                    #print("1:Snapshot " + snapshots.snapshots[vol]['ordered'][x][0] + " is older than recoverypoint")
                #if len(snapshots.snapshots[vol]['ordered']) >= x + 1:
                    #print("2:Dictionary has another element, length is " + str(len(snapshots.snapshots[vol]['ordered'])))
                if snapshots.snapshots[vol]['ordered'][x][1] < recoverytarget:
                        timestamp=snapshots.snapshots[vol]['snapshots'][snapshots.snapshots[vol]['ordered'][x][0]]['epoch']
                        snapshot2clone=snapshots.snapshots[vol]['ordered'][x][0]
                        break
            else:
                if snapshots.snapshots[vol]['ordered'][x][1] > recoverytarget \
                   and (len(snapshots.snapshots[vol]['ordered']) == x + 1 \
                        or snapshots.snapshots[vol]['ordered'][x+1][1] < recoverytarget):
                        timestamp=snapshots.snapshots[vol]['snapshots'][snapshots.snapshots[vol]['ordered'][x][0]]['epoch']
                        snapshot2clone=snapshots.snapshots[vol]['ordered'][x][0]
                        break
        if snapshot2clone:
            userio.message("Snapshot "+ vol + ":" + snapshot2clone + " with timestamp " + snapshots.snapshots[vol]['snapshots'][snapshot2clone]['date'] + " meets recovery target")
            clonetargets[vol]=snapshots.snapshots[vol]['snapshots'][snapshot2clone]
            ready2clone.append([vol,snapshot2clone])
        else:
            userio.message("Unable to find snapshot for " + vol + " that matches requested recoverypoint")
            unable2clone.append(vol)

if len(ready2clone) < 1:
    userio.fail("No matching volumes detected")

if len(unable2clone) > 0:
    userio.linefeed()
    if len(ready2clone) > 0:
        userio.message("The following volumes are scheduled for cloning")
        for vol,snapshot in ready2clone:
            userio.message(">> " + vol + ":" + snapshot)
    userio.warn("The following volumes do not have snapshot matching requested recoverypoint")
    for vol in unable2clone:
        userio.message(">> " + vol)
    if not userio.yesno("Proceed?"):
        userio.message("Exiting...")
        sys.exit(0)

if myopts.skew:
    userio.linefeed()
    userio.message("User specified a maximum skew of " + str(myopts.skew) + " seconds")
    skews=[]
    for vol in clonetargets.keys():
        skews.append([vol,clonetargets[vol]['name'],clonetargets[vol]['date'],clonetargets[vol]['epoch']])
    skewgrid=sorted(skews,key=lambda x: int(x[3]))
    skew=int(skewgrid[-1][3] - skewgrid[0][3])
    skewgrid.insert(0,['Volume','Snapshot','Date','Epoch seconds'])
    userio.grid(skewgrid)
    if skew > myopts.skew:
        userio.warn("Difference in available snapshots exceeds skew time")
        if not userio.yesno("Proceed?"):
            userio.message("Exiting...")
            sys.exit(0)

luns2clone=[]
volumes2clone=[]
userio.message("Retrieving LUNs from current volumes...")
for volume in clonetargets.keys():
    lunlist=[]

    # for volpattern in voltargets.keys():
    #     if volpattern == '*':
    #         volpatternmatch=re.compile('^.*.$')
    #     elif re.findall(r'[?*.^$]',volpattern):
    #         volpatternmatch=re.compile(volpattern)
    #     else:
    #         volpatternmatch=re.compile('^' + volpattern + '$')

    #     if re.match(volpatternmatch,volume):
    #         for lun in voltargets[volpattern]:
    #             lunlist.append("/vol/" + volume + "/" + lun)

    for volpattern in voltargets.keys():
        protected_groups = {}
        def protect_group(match):
            placeholder = f"\0{len(protected_groups)}\0"
            protected_groups[placeholder] = match.group(0)
            return placeholder

        pattern = re.sub(r'\([^)]*\)', protect_group, volpattern)
        pattern = pattern.replace('*', '.*')
        for placeholder, original in protected_groups.items():
            pattern = pattern.replace(placeholder, original)
        regex = re.compile(pattern)
        if re.search(regex,volume):
            for lun in voltargets[volpattern]:
                lunlist.append("/vol/" + volume + "/" + lun)
                
    matchingluns=getLUNs(svm,lun=lunlist,debug=debug)
    if not matchingluns.go():
        userio.message("Unable to retrieve LUN list")
        matchingluns.showDebug()
        sys.exit(1)
    else:
        for lun in matchingluns.luns.keys():
            userio.message(">> " + lun)
            luns2clone.append(lun)
            volumes2clone.append(lun.split('/')[2])

volumes2clone=list(set(volumes2clone))

userio.linefeed()
userio.message("Cloning volumes...")
clonecompleted=[]
clonefailed=[]
for vol in volumes2clone:
    clone=cloneVolumes(svm,(vol,cloneprefix + vol,clonetargets[vol]['uuid']),uuid=True,split=splitclones,debug=debug)
    if not clone.go():
        clone.showDebug()
        clonefailed.append(vol)
    else:
        clonecompleted.append(cloneprefix + vol)
userio.message()

if not nosleep:
    userio.message("Sleeping 10 seconds for LUN registration to complete")
    time.sleep(10)
    userio.message()

for lun in luns2clone:
    lunpath=lun.split('/')
    lunpath[2]=cloneprefix + lunpath[2]
    lun=('/').join(lunpath)
    igroupbase=lun.split('_')[igrouptoken]
    if igroupname:
        igroup=igroupname.replace('%',igroupbase)
    else:
        igroup=igroupbase
    matchingluns=getLUNs(svm,lun=lun,debug=debug)
    if not matchingluns.go():
        userio.message("Unable to retrieve LUN")
        matchingluns.showDebug()
        sys.exit(1)
    else:
        lunserialnumberascii=matchingluns.luns[lun]["serialnumber"]
        lunserialnumberhex=str(binascii.hexlify(lunserialnumberascii.encode())).replace("b'",'').replace("'",'')
    userio.message("Mapping " + lun + " with serial " + lunserialnumberhex + " to igroup " + igroup)
    mapping=mapLUNs(svm,lun,igroup,debug=debug)
    if not mapping.go():
        mapping.showDebug()



